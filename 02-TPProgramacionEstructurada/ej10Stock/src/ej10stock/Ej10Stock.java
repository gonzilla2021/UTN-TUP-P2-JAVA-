package ej10stock;
/******************************************************************************** 
 * Sistema de Gesti√≥n de Stock para control de inventario
 * 
 * Este programa simula las operaciones b√°sicas de un sistema de inventario:
 * - Ventas: reducen el stock disponible
 * - Recepciones: aumentan el stock disponible
 * - C√°lculo autom√°tico: actualiza el stock final
 * 
 * F√≥rmula utilizada:
 * NuevoStock = StockActual - CantidadVendida + CantidadRecibida
 * 
 * Ejemplo de funcionamiento:
 * Stock inicial: 50 unidades
 * Ventas: 20 unidades (reducen stock)
 * Recepciones: 30 unidades (aumentan stock)  
 * Stock final: 50 - 20 + 30 = 60 unidades
 * 
 * Caracter√≠sticas:
 * - Validaci√≥n de entradas negativas
 * - Protecci√≥n contra stock negativo
 * - Arquitectura modular con m√©todos separados

 ********************************************************************************/

import java.util.Scanner;

public class Ej10Stock {
    
    /**
     * M√©todo principal que controla la interfaz de usuario y validaciones
     * 
     * @param args argumentos de l√≠nea de comandos (no utilizados)
     */
    public static void main(String[] args) {
        
        // Crear objeto Scanner para leer entrada del usuario
        Scanner input = new Scanner(System.in);
        
        // ===== PRESENTACI√ìN DEL SISTEMA =====
        System.out.println("=== SISTEMA DE GESTI√ìN DE STOCK ===");
        System.out.println("Actualice el inventario registrando ventas y recepciones\n");
        
        // ===== ENTRADA DE DATOS =====
        
        // Solicitar stock actual del producto
        System.out.print("Ingrese el stock actual del producto: ");
        int stockActual = Integer.parseInt(input.nextLine());
        
        // Solicitar cantidad vendida (salida de stock)
        System.out.print("Ingrese la cantidad vendida: ");
        int cantidadVendida = Integer.parseInt(input.nextLine());
        
        // Solicitar cantidad recibida (entrada de stock)
        System.out.print("Ingrese la cantidad recibida: ");
        int cantidadRecibida = Integer.parseInt(input.nextLine());
        
        // ===== VALIDACI√ìN DE ENTRADAS =====
        
        // Verificar que todos los valores sean no negativos
        // En un sistema real, las cantidades negativas no tienen sentido
        if (stockActual < 0 || cantidadVendida < 0 || cantidadRecibida < 0) {
            // Error: mostrar mensaje y terminar programa
            System.out.println("\n‚ùå ERROR: Los n√∫meros no pueden ser negativos");
            System.out.println("   - Stock actual: debe ser ‚â• 0");
            System.out.println("   - Cantidad vendida: debe ser ‚â• 0");  
            System.out.println("   - Cantidad recibida: debe ser ‚â• 0");
            
        } else {
            // ===== C√ÅLCULO DEL NUEVO STOCK =====
            
            // Llamar al m√©todo actualizarStock para calcular el nuevo inventario
            // Este m√©todo encapsula la l√≥gica de c√°lculo y validaci√≥n
            int nuevoStock = actualizarStock(stockActual, cantidadVendida, cantidadRecibida);
            
            // ===== MOSTRAR RESULTADOS DETALLADOS =====
            
            System.out.println("\n=== MOVIMIENTOS DE STOCK ===");
            System.out.println("Stock inicial: " + stockActual + " unidades");
            System.out.println("(-) Cantidad vendida: " + cantidadVendida + " unidades");
            System.out.println("(+) Cantidad recibida: " + cantidadRecibida + " unidades");
            System.out.println("-".repeat(40));
            System.out.println("Stock final: " + nuevoStock + " unidades");
            
            // An√°lisis del resultado
            int diferencia = nuevoStock - stockActual;
            if (diferencia > 0) {
                System.out.println("‚úÖ Stock aument√≥ en: " + diferencia + " unidades");
            } else if (diferencia < 0) {
                System.out.println("üìâ Stock disminuy√≥ en: " + Math.abs(diferencia) + " unidades");
            } else {
                System.out.println("‚û°Ô∏è Stock se mantiene igual");
            }
            
            // Alerta de stock bajo
            if (nuevoStock <= 5 && nuevoStock > 0) {
                System.out.println("‚ö†Ô∏è ALERTA: Stock bajo - considere reabastecer");
            } else if (nuevoStock == 0) {
                System.out.println("üö´ CR√çTICO: Producto agotado - reabastecimiento urgente");
            }
        }
        
        // Cerrar el scanner para liberar recursos del sistema
        input.close();
    }
    
    /**
     * M√©todo para actualizar el stock despu√©s de operaciones de venta y recepci√≥n
     * 
     * Este m√©todo implementa la l√≥gica central del sistema de inventario:
     * 
     * Proceso de c√°lculo:
     * 1. Partir del stock actual
     * 2. Restar las unidades vendidas (salida del inventario)
     * 3. Sumar las unidades recibidas (entrada al inventario)
     * 4. Aplicar protecci√≥n contra stock negativo
     * 
     * F√≥rmula: NuevoStock = StockActual - CantidadVendida + CantidadRecibida
     * 
     * Protecci√≥n implementada:
     * - Si el c√°lculo resulta en stock negativo, se establece en 0
     * - Esto evita tener inventarios "imposibles" en el sistema
     * 
     * @param stockActual el stock disponible antes de la operaci√≥n
     * @param cantidadVendida cu√°ntas unidades se vendieron (salida)
     * @param cantidadRecibida cu√°ntas unidades se recibieron (entrada)
     * @return el nuevo stock despu√©s de aplicar ambas operaciones
     */
    public static int actualizarStock(int stockActual, int cantidadVendida, int cantidadRecibida) {
        
        // ===== APLICAR F√ìRMULA DE ACTUALIZACI√ìN =====
        
        // Calcular el nuevo stock usando la f√≥rmula est√°ndar
        // stockActual: punto de partida
        // -cantidadVendida: reduce el stock (operaci√≥n de salida)
        // +cantidadRecibida: aumenta el stock (operaci√≥n de entrada)
        int nuevoStock = stockActual - cantidadVendida + cantidadRecibida;
        
        // ===== PROTECCI√ìN CONTRA STOCK NEGATIVO =====
        
        // En un sistema real, el stock no puede ser negativo
        // Si el c√°lculo da negativo, establecer en 0 (stock agotado)
        if (nuevoStock < 0) {
            System.out.println("‚ö†Ô∏è Advertencia: La venta excede el stock disponible.");
            System.out.println("   Stock calculado: " + nuevoStock + " ‚Üí Ajustado a: 0");
            nuevoStock = 0;  // Establecer stock m√≠nimo en 0
        }
        
        // Retornar el stock final calculado y validado
        return nuevoStock;
    }
}